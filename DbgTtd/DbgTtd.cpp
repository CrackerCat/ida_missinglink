
//----------------------------------------------------------------------------
//
// Time Travel Debugger (TTD) engine interface.
// IDA Pro plugin version
//----------------------------------------------------------------------------
#include "StdAfx.h"
#include <wincrypt.h>
#include <exception>

#include "DbgTtd.h"

#pragma comment(lib, "Advapi32.lib")
#pragma comment(lib, "Crypt32.lib")

#define LIBTAG "ttd_eng: "

// TTDReplay.dll exports
typedef BOOL(WINAPI* tInitiateReplayEngineHandshake)(__in LPCSTR Seed, __out PBYTE Source);
typedef int (WINAPI* tCreateReplayEngineWithHandshake)(__in LPCSTR EncodedHandshake, __out TTD::Replay::ReplayEngine **pReplayEngine, __in const GUID *guid);



// The IReplayEngineView GUID from "QueryInterfaceByIoctl<class TTD::Replay::IReplayEngineView>()"
// Also "version_guid"
// {4d3420a5-37ef-4114-ae91-63d0378c84a9}
static const GUID IID_IReplayEngineView = { 0x4d3420a5, 0x37ef, 0x4114, 0xae, 0x91, 0x63, 0xd0, 0x37, 0x8c, 0x84, 0xa9 };

// The ICursorView GUID from "QueryInterfaceByIoctl<class TTD::Replay::ICursorView>()"
// {b1d2e6ab-9052-4b72-999e-a88ba868f899}
const GUID TTD::Replay::Cursor::IID_ICursorView = { 0xb1d2e6ab, 0x9052, 0x4b72, 0x99, 0x9E, 0xA8, 0x8B, 0xA8, 0x68, 0xF8, 0x99 };

extern const char handshakeKey1[1734];
extern const char handshakeKey2[880];

// To cover cases were the hr might be a windows error code, not an HRESULT; not just testing the high/error bit
#undef FAILED
#define FAILED(hr) (((HRESULT) (hr)) != S_OK)


// ----------------------------------------------------------------------------------------------
// Utility

// Print captured C SEH info
static int ttd_exception(__in LPCSTR name, __in LPEXCEPTION_POINTERS nfo)
{
	// msg is THREAD_SAFE
	msg(" \n");
	msg(LIBTAG "** Exception: 0x%08X @ 0x%llX, in %s()! **\n", nfo->ExceptionRecord->ExceptionCode, (UINT64) nfo->ExceptionRecord->ExceptionAddress, name);
	return EXCEPTION_EXECUTE_HANDLER;
}
#undef C_EXCEPT
#define C_EXCEPT() __except(ttd_exception(__FUNCTION__, GetExceptionInformation())){}

// Return error string for windows and HRESULT errors
static LPSTR ttd_errror_string(DWORD lastError, __out_bcount_z(1024) LPSTR buffer)
{
	if (!FormatMessageA((FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS), NULL, lastError, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), buffer, 1024, NULL))
		strcpy_s(buffer, 1024, "Unknown");
	else
	{
		// Nix line feed if string has one
		if (LPSTR lineFeed = strstr(buffer, "\r"))
			*lineFeed = 0;
	}
	return buffer;
}

// Error handling helpers for a "goto" style cleanup
#define ERROR_JMP(_reason) { msg(LIBTAG "** " _reason " **\n"); goto exit; }
#define ERROR_FUNC_JMP(_api, _error) \
{ \
	char errorBuffer[1024]; \
	msg(LIBTAG "** %s() failed, Error: 0x%X \"%s\" **", #_api, _error, ttd_errror_string(_error, errorBuffer)); \
	goto exit; \
}

// ----------------------------------------------------------------------------------------------

// Encode the handshake key string
static HRESULT EncodeHanshake(__in LPCSTR input, __out_bcount_z(48) LPSTR output)
{
	HCRYPTPROV cryptProvider = NULL;
	HCRYPTHASH hashPointer = NULL;
	BYTE sha[32] = {};
	DWORD hashSize = 32;
	DWORD outputLen = 48;
	HRESULT hr = E_FAIL;

	// SHA256 encode the input handshake string
	if (!CryptAcquireContextA(&cryptProvider, NULL, NULL, PROV_RSA_AES, (CRYPT_VERIFYCONTEXT | CRYPT_SILENT)))
	{
		hr = HRESULT_FROM_WIN32(GetLastError());
		goto exit;
	}

	if (!CryptCreateHash(cryptProvider, CALG_SHA_256, 0, 0, &hashPointer))
	{
		hr = HRESULT_FROM_WIN32(GetLastError());
		goto exit;
	}

	if (!CryptHashData(hashPointer, (PBYTE)input, (DWORD) strlen(input), 0))
	{
		hr = HRESULT_FROM_WIN32(GetLastError());
		goto exit;
	}

	if (!CryptGetHashParam(hashPointer, HP_HASHVAL, sha, &hashSize, 0))
	{
		hr = HRESULT_FROM_WIN32(GetLastError());
		goto exit;
	}

	// Base64 encode the hash bytes
	if (!CryptBinaryToStringA(sha, 32, (CRYPT_STRING_BASE64 | CRYPT_STRING_NOCRLF), output, &outputLen))
	{
		hr = E_FAIL;
		goto exit;
	}

	// Nix the '=' at the end
	output[outputLen - 1] = 0;
	hr = S_OK;

	exit:
	if (hashPointer)
	{
		CryptDestroyHash(hashPointer);
		hashPointer = NULL;
	}

	if (cryptProvider)
	{
		CryptReleaseContext(cryptProvider, 0);
		cryptProvider = NULL;
	}

	return hr;
}


// Create a TTD::Replay::ReplayEngine class instance.
// Args:
// TtdPath: Path to a WinDbgX 64bit TTD folder. E.g: L"C:\Program Files\WindowsApps\Microsoft.WinDbg_1.2210.3001.0_x64__8wekyb3d8bbwe\amd64\ttd"
// IReplayEngine: Pointer to receive the TTD::Replay::ReplayEngine class instance
//
// Will take a while to load depending on the trace file size.
// Returns S_OK on success
//
HRESULT TTD::CreateReplayEngine(__in LPCWSTR TtdPath, __out TTD::Replay::ReplayEngine **pReplayEngine)
{
	HRESULT hr = E_FAIL;

	try
	{
		*pReplayEngine = NULL;

		WCHAR ttdFolder[MAX_PATH] = {};
		wcscpy_s(ttdFolder, MAX_PATH, TtdPath);
		wcscat_s(ttdFolder, MAX_PATH, L"\\TTDReplay.dll");
		HMODULE hReplayDll = LoadLibraryExW(ttdFolder, NULL, LOAD_WITH_ALTERED_SEARCH_PATH);
		if (!hReplayDll)
		{
			hr = HRESULT_FROM_WIN32(ERROR_PATH_NOT_FOUND);
			ERROR_JMP("Failed to load \"TTDReplay.dll\" from the passed 64bit TTD path");
		}

		tInitiateReplayEngineHandshake InitiateReplayEngineHandshake = (tInitiateReplayEngineHandshake) GetProcAddress(hReplayDll, "InitiateReplayEngineHandshake");
		tCreateReplayEngineWithHandshake CreateReplayEngineWithHandshake = (tCreateReplayEngineWithHandshake) GetProcAddress(hReplayDll, "CreateReplayEngineWithHandshake");
		if(!InitiateReplayEngineHandshake || !CreateReplayEngineWithHandshake)
			ERROR_JMP("Failed to get required \"TTDReplay.dll\" import");

		// Get handshake source string
		BYTE Source[48] = {};
		BOOL result = InitiateReplayEngineHandshake("DbgEng", Source);
		if (result)
		{
			ERROR_JMP("InitiateReplayEngineHandshake() failed");
			hr = HRESULT_FROM_WIN32(GetLastError());
			if (hr == S_OK)
				hr = E_FAIL;
		}

		// Build handshake key
		char Destination[328] = {};
		strncpy_s(Destination, (LPSTR) Source, 47);

		for (size_t i = 0; i < 2; ++i)
			strncat_s(Destination, sizeof(Destination), &handshakeKey1[102 * ((Source[i] - 48) % 17)], 101);

		strncat_s(Destination, sizeof(Destination), &handshakeKey2[79 * ((Source[2] - 48) % 11)], 78);

		// Encrypt and encode the handshake
		char HandshakeEncoded[48] = {};
		hr = EncodeHanshake(Destination, HandshakeEncoded);
		if(FAILED(hr))
			goto exit;

		// Create ReplayEngine class instance
		result = CreateReplayEngineWithHandshake(HandshakeEncoded, pReplayEngine, &IID_IReplayEngineView);
		if (result != 0)
		{
			ERROR_JMP("CreateReplayEngineWithHandshake() failed");
			hr = HRESULT_FROM_WIN32(GetLastError());
			if(hr == S_OK)
				hr = E_FAIL;
		}

		// Set internal ErrorReporting callbacks to avoid crash when trace file path is invalid, etc.
		(*pReplayEngine)->RegisterDebugModeAndLogging(TTD::Replay::DefaultMode, new TTD::ErrorReporting());

		hr = S_OK;
	}
	catch(std::exception &ex)
	{
		msg(" \n");
		msg(LIBTAG "** STD C++ exception!: What: \"%s\", from TTD::CreateReplayEngine() **\n", ex.what());
		hr = HRESULT_FROM_WIN32(ERROR_UNHANDLED_EXCEPTION);
		goto exit;
	}
	catch (...)
	{
		msg(" \n");
		msg(LIBTAG "** C/C++ exception! from TTD::CreateReplayEngine() **\n");
		hr = HRESULT_FROM_WIN32(ERROR_UNHANDLED_EXCEPTION);
		goto exit;
	}

	exit:
	return hr;
}


static const char handshakeKey1[1734] =
{
	0x53, 0x43, 0x4F, 0x50, 0x45, 0x20, 0x4F, 0x46, 0x20, 0x4C, 0x49, 0x43, 0x45, 0x4E, 0x53, 0x45, 0x2E, 0x20, 0x54, 0x68,
	0x65, 0x20, 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,	0x20, 0x69, 0x73, 0x20, 0x6C, 0x69, 0x63, 0x65, 0x6E, 0x73,
	0x65, 0x64, 0x2C, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x73, 0x6F,	0x6C, 0x64, 0x2E, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x6F,	0x6E, 0x6C, 0x79, 0x20, 0x67, 0x69, 0x76, 0x65, 0x73, 0x20,
	0x79, 0x6F, 0x75, 0x20, 0x73, 0x6F, 0x6D, 0x65, 0x20, 0x72,	0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x00,
	0x00, 0x00, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,	0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2E, 0x20,
	0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20,	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x20, 0x61,
	0x6C, 0x6C, 0x20, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x20, 0x72,	0x69, 0x67, 0x68, 0x74, 0x73, 0x2E, 0x20, 0x55, 0x6E, 0x6C,
	0x65, 0x73, 0x73, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63,	0x61, 0x62, 0x6C, 0x65, 0x20, 0x6C, 0x61, 0x77, 0x20, 0x67,
	0x69, 0x76, 0x65, 0x73, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x6D,	0x6F, 0x72, 0x65, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x20, 0x00, 0x00, 0x00, 0x64, 0x65, 0x73, 0x70, 0x69, 0x74,	0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6C, 0x69, 0x6D,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2C, 0x20, 0x79,	0x6F, 0x75, 0x20, 0x6D, 0x61, 0x79, 0x20, 0x75, 0x73, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6F, 0x66, 0x74, 0x77,	0x61, 0x72, 0x65, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x61,
	0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6C,	0x79, 0x20, 0x70, 0x65, 0x72, 0x6D, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,	0x61, 0x67, 0x72, 0x65, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x2E,
	0x20, 0x49, 0x6E, 0x20, 0x00, 0x00, 0x64, 0x6F, 0x69, 0x6E,	0x67, 0x20, 0x73, 0x6F, 0x2C, 0x20, 0x79, 0x6F, 0x75, 0x20,
	0x6D, 0x75, 0x73, 0x74, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x6C,	0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6E, 0x79,
	0x20, 0x74, 0x65, 0x63, 0x68, 0x6E, 0x69, 0x63, 0x61, 0x6C,	0x20, 0x6C, 0x69, 0x6D, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6F,
	0x6E, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20,	0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x61,	0x6C, 0x6C, 0x6F, 0x77, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x74,
	0x6F, 0x20, 0x75, 0x73, 0x65, 0x20, 0x00, 0x00, 0x69, 0x74,	0x20, 0x69, 0x6E, 0x20, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69,
	0x6E, 0x20, 0x77, 0x61, 0x79, 0x73, 0x2E, 0x20, 0x46, 0x6F,	0x72, 0x20, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C,
	0x20, 0x69, 0x66, 0x20, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73,	0x6F, 0x66, 0x74, 0x20, 0x74, 0x65, 0x63, 0x68, 0x6E, 0x69,
	0x63, 0x61, 0x6C, 0x6C, 0x79, 0x20, 0x6C, 0x69, 0x6D, 0x69,	0x74, 0x73, 0x20, 0x6F, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6C, 0x65, 0x73, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6E,	0x73, 0x69, 0x62, 0x69, 0x6C, 0x69, 0x74, 0x79, 0x20, 0x66,
	0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x00, 0x00, 0x00,	0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2C, 0x20,
	0x79, 0x6F, 0x75, 0x20, 0x6D, 0x61, 0x79, 0x20, 0x6E, 0x6F,	0x74, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6E, 0x64, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72,	0x65, 0x20, 0x62, 0x79, 0x2C, 0x20, 0x61, 0x6D, 0x6F, 0x6E,
	0x67, 0x20, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68,	0x69, 0x6E, 0x67, 0x73, 0x2C, 0x20, 0x6C, 0x6F, 0x61, 0x64,
	0x69, 0x6E, 0x67, 0x20, 0x6F, 0x72, 0x20, 0x69, 0x6E, 0x6A,	0x65, 0x63, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x74,
	0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x20, 0x61, 0x6E, 0x79, 0x20, 0x6E, 0x6F, 0x6E, 0x2D, 0x4D,	0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x61,
	0x64, 0x64, 0x2D, 0x69, 0x6E, 0x73, 0x2C, 0x20, 0x6D, 0x61,	0x63, 0x72, 0x6F, 0x73, 0x2C, 0x20, 0x6F, 0x72, 0x20, 0x70,
	0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x73, 0x3B, 0x20, 0x6D,	0x6F, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6E, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72,	0x65, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x73, 0x3B,	0x20, 0x00, 0x00, 0x00, 0x6F, 0x72, 0x20, 0x61, 0x64, 0x64,
	0x69, 0x6E, 0x67, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,	0x65, 0x73, 0x20, 0x6F, 0x72, 0x20, 0x66, 0x75, 0x6E, 0x63,
	0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C, 0x69, 0x74, 0x79, 0x20,	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6C, 0x65, 0x6E, 0x74,
	0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x66,	0x6F, 0x75, 0x6E, 0x64, 0x20, 0x69, 0x6E, 0x20, 0x56, 0x69,
	0x73, 0x75, 0x61, 0x6C, 0x20, 0x53, 0x74, 0x75, 0x64, 0x69,	0x6F, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x56, 0x69, 0x73, 0x75,
	0x61, 0x6C, 0x20, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x20,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6F, 0x64, 0x65,
	0x20, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2E,	0x20, 0x59, 0x6F, 0x75, 0x20, 0x6D, 0x61, 0x79, 0x20, 0x6E,
	0x6F, 0x74, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20,
	0x77, 0x6F, 0x72, 0x6B, 0x20, 0x61, 0x72, 0x6F, 0x75, 0x6E,	0x64, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x74, 0x65, 0x63, 0x68,
	0x6E, 0x69, 0x63, 0x61, 0x6C, 0x20, 0x6C, 0x69, 0x6D, 0x69,	0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x69, 0x6E,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6F, 0x66, 0x74, 0x77,	0x61, 0x72, 0x65, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x2A, 0x20, 0x20, 0x20, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,	0x65, 0x20, 0x65, 0x6E, 0x67, 0x69, 0x6E, 0x65, 0x65, 0x72,
	0x2C, 0x20, 0x64, 0x65, 0x63, 0x6F, 0x6D, 0x70, 0x69, 0x6C,	0x65, 0x20, 0x6F, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x73,
	0x73, 0x65, 0x6D, 0x62, 0x6C, 0x65, 0x20, 0x74, 0x68, 0x65,	0x20, 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2C,
	0x20, 0x6F, 0x72, 0x20, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x77,	0x69, 0x73, 0x65, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6D, 0x70,
	0x74, 0x20, 0x74, 0x6F, 0x20, 0x64, 0x65, 0x72, 0x69, 0x76,	0x65, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6F, 0x75, 0x72,	0x63, 0x65, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x20, 0x66, 0x6F,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6F, 0x66, 0x74,	0x77, 0x61, 0x72, 0x65, 0x2C, 0x20, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x6F, 0x20,	0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6E, 0x74,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20,	0x62, 0x79, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x20, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x20, 0x6C, 0x69, 0x63, 0x65, 0x6E,	0x73, 0x69, 0x6E, 0x67, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x72, 0x6D, 0x73, 0x20,	0x67, 0x6F, 0x76, 0x65, 0x72, 0x6E, 0x69, 0x6E, 0x67, 0x20,
	0x75, 0x73, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x63, 0x65, 0x72,	0x74, 0x61, 0x69, 0x6E, 0x20, 0x6F, 0x70, 0x65, 0x6E, 0x2D,
	0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x20, 0x63, 0x6F, 0x6D,	0x70, 0x6F, 0x6E, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x6D, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20,	0x69, 0x6E, 0x63, 0x6C, 0x75, 0x64, 0x65, 0x64, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6F,	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x3B, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x20, 0x20, 0x20,	0x72, 0x65, 0x6D, 0x6F, 0x76, 0x65, 0x2C, 0x20, 0x6D, 0x69,
	0x6E, 0x69, 0x6D, 0x69, 0x7A, 0x65, 0x2C, 0x20, 0x62, 0x6C,	0x6F, 0x63, 0x6B, 0x20, 0x6F, 0x72, 0x20, 0x6D, 0x6F, 0x64,
	0x69, 0x66, 0x79, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x6E, 0x6F,	0x74, 0x69, 0x63, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x4D,
	0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x6F,	0x72, 0x20, 0x69, 0x74, 0x73, 0x20, 0x73, 0x75, 0x70, 0x70,
	0x6C, 0x69, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x74,	0x68, 0x65, 0x20, 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x20,	0x20, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x69,	0x6E, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x77, 0x61, 0x79, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x67,	0x61, 0x69, 0x6E, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6C, 0x61, 0x77, 0x3B, 0x20, 0x6F, 0x72, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x2A, 0x20, 0x20, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2C,
	0x20, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x73, 0x68, 0x2C, 0x20,	0x72, 0x65, 0x6E, 0x74, 0x20, 0x6F, 0x72, 0x20, 0x6C, 0x65,
	0x61, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6F,	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2C, 0x20, 0x6F, 0x72,
	0x20, 0x70, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x20, 0x74,	0x68, 0x65, 0x20, 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x74, 0x61,	0x6E, 0x64, 0x2D, 0x61, 0x6C, 0x6F, 0x6E, 0x65, 0x20, 0x6F,
	0x66, 0x66, 0x65, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x00, 0x00,	0x00, 0x00, 0x66, 0x6F, 0x72, 0x20, 0x6F, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x75, 0x73, 0x65, 0x2C,	0x20, 0x6F, 0x72, 0x20, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x66,
	0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6F, 0x66,	0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x6F, 0x72, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6D,	0x65, 0x6E, 0x74, 0x20, 0x74, 0x6F, 0x20, 0x61, 0x6E, 0x79,
	0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x20, 0x70, 0x61, 0x72,	0x74, 0x79, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00
};

static const char handshakeKey2[880] =
{
	0x56, 0x2B, 0x79, 0x2C, 0x28, 0x48, 0x60, 0x76, 0x26, 0x41, 0x5C, 0x40, 0x78, 0x2B, 0x3B, 0x34, 0x47, 0x75, 0x4B, 0x3C,
	0x24, 0x7A, 0x5D, 0x2E, 0x2E, 0x3F, 0x38, 0x23, 0x77, 0x56,	0x5A, 0x6E, 0x27, 0x2A, 0x2B, 0x7D, 0x6A, 0x31, 0x45, 0x5C,
	0x24, 0x6B, 0x30, 0x24, 0x2F, 0x6C, 0x76, 0x6B, 0x70, 0x62,	0x38, 0x34, 0x36, 0x4B, 0x3A, 0x6B, 0x66, 0x22, 0x43, 0x49,
	0x5C, 0x59, 0x6C, 0x2A, 0x64, 0x34, 0x20, 0x2F, 0x20, 0x2E,	0x52, 0x2C, 0x7B, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42,
	0x25, 0x26, 0x42, 0x48, 0x3C, 0x2F, 0x27, 0x65, 0x7B, 0x55,	0x60, 0x3E, 0x46, 0x3E, 0x6B, 0x73, 0x33, 0x6C, 0x6B, 0x67,
	0x53, 0x58, 0x3E, 0x45, 0x54, 0x71, 0x7B, 0x56, 0x73, 0x75,	0x2D, 0x69, 0x3C, 0x6B, 0x56, 0x63, 0x7D, 0x29, 0x50, 0x28,
	0x48, 0x60, 0x77, 0x4B, 0x6C, 0x54, 0x76, 0x75, 0x50, 0x45,	0x44, 0x3E, 0x42, 0x4C, 0x41, 0x58, 0x29, 0x43, 0x30, 0x58,
	0x31, 0x73, 0x4E, 0x5C, 0x5B, 0x75, 0x34, 0x2C, 0x48, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x6B,
	0x40, 0x77, 0x4A, 0x72, 0x26, 0x37, 0x68, 0x2B, 0x4E, 0x5C,	0x60, 0x4A, 0x66, 0x6B, 0x34, 0x44, 0x24, 0x6E, 0x62, 0x63,
	0x64, 0x4B, 0x65, 0x6E, 0x5E, 0x56, 0x6B, 0x4F, 0x48, 0x3C,	0x27, 0x4B, 0x4E, 0x3A, 0x25, 0x75, 0x56, 0x4F, 0x27, 0x47,
	0x33, 0x65, 0x76, 0x23, 0x29, 0x2E, 0x24, 0x67, 0x4D, 0x24,	0x72, 0x2F, 0x3D, 0x3D, 0x71, 0x74, 0x59, 0x5D, 0x50, 0x4A,
	0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x6F, 0x77,
	0x43, 0x6F, 0x5C, 0x31, 0x5C, 0x42, 0x3A, 0x39, 0x36, 0x34,	0x27, 0x34, 0x32, 0x29, 0x7B, 0x63, 0x30, 0x3C, 0x71, 0x2C,
	0x3E, 0x5C, 0x5C, 0x31, 0x22, 0x20, 0x2D, 0x20, 0x21, 0x40,	0x31, 0x77, 0x7D, 0x58, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x27, 0x2B, 0x7C,
	0x69, 0x35, 0x3F, 0x7D, 0x5D, 0x57, 0x50, 0x4C, 0x53, 0x7A,	0x65, 0x31, 0x57, 0x45, 0x36, 0x3B, 0x27, 0x7D, 0x54, 0x67,
	0x3B, 0x38, 0x33, 0x76, 0x38, 0x56, 0x32, 0x7A, 0x7D, 0x6F,	0x76, 0x26, 0x78, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x58, 0x6A, 0x6D, 0x23,
	0x58, 0x3A, 0x76, 0x63, 0x4B, 0x64, 0x59, 0x6E, 0x30, 0x56,	0x6E, 0x6B, 0x72, 0x4C, 0x51, 0x44, 0x4F, 0x77, 0x79, 0x22,
	0x3B, 0x20, 0x2E, 0x33, 0x52, 0x42, 0x53, 0x57, 0x25, 0x52,	0x49, 0x64, 0x4C, 0x4F, 0x5A, 0x37, 0x28, 0x47, 0x4B, 0x52,
	0x20, 0x2F, 0x20, 0x31, 0x3E, 0x28, 0x77, 0x63, 0x69, 0x6D,	0x65, 0x3A, 0x35, 0x71, 0x44, 0x73, 0x20, 0x3F, 0x20, 0x5B,
	0x6C, 0x35, 0x62, 0x35, 0x44, 0x4B, 0x52, 0x20, 0x3D, 0x20,	0x39, 0x00, 0x00, 0x00, 0x31, 0x55, 0x48, 0x4A, 0x5E, 0x37,
	0x51, 0x74, 0x2E, 0x53, 0x50, 0x74, 0x63, 0x3C, 0x51, 0x3E,	0x36, 0x3E, 0x23, 0x24, 0x6A, 0x45, 0x2B, 0x3E, 0x3E, 0x65,
	0x22, 0x50, 0x2A, 0x4D, 0x62, 0x20, 0x7C, 0x20, 0x62, 0x4C,	0x20, 0x2F, 0x20, 0x60, 0x48, 0x35, 0x27, 0x68, 0x37, 0x6E,
	0x50, 0x3A, 0x6F, 0x77, 0x20, 0x2B, 0x20, 0x7D, 0x7A, 0x61,	0x71, 0x44, 0x42, 0x32, 0x2C, 0x22, 0x5C, 0x28, 0x38, 0x36,
	0x58, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x3B, 0x4A, 0x4E, 0x43, 0x7B, 0x36, 0x62,
	0x42, 0x2C, 0x3E, 0x52, 0x32, 0x47, 0x4D, 0x79, 0x3E, 0x74,	0x21, 0x26, 0x4A, 0x5E, 0x52, 0x53, 0x79, 0x7D, 0x32, 0x32,
	0x40, 0x79, 0x50, 0x38, 0x7C, 0x51, 0x3B, 0x70, 0x68, 0x3A,	0x5C, 0x6D, 0x6A, 0x56, 0x3D, 0x78, 0x4C, 0x23, 0x79, 0x27,
	0x29, 0x79, 0x2B, 0x4E, 0x7C, 0x63, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x2F, 0x76, 0x4A, 0x7B, 0x23, 0x4F, 0x63, 0x24,
	0x78, 0x67, 0x64, 0x75, 0x4F, 0x24, 0x5C, 0x36, 0x55, 0x52,	0x3E, 0x43, 0x5F, 0x35, 0x73, 0x3F, 0x4D, 0x32, 0x58, 0x5B,
	0x65, 0x58, 0x6D, 0x61, 0x3A, 0x29, 0x55, 0x79, 0x72, 0x78,	0x62, 0x4B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x3F, 0x4D, 0x59, 0x22, 0x2C, 0x34, 0x5F, 0x62, 0x39,
	0x4C, 0x70, 0x22, 0x79, 0x71, 0x47, 0x75, 0x33, 0x37, 0x68,	0x34, 0x2E, 0x7D, 0x5D, 0x77, 0x23, 0x28, 0x76, 0x62, 0x4E,
	0x30, 0x63, 0x4B, 0x5E, 0x3F, 0x52, 0x5D, 0x22, 0x76, 0x3C,	0x58, 0x46, 0x67, 0x24, 0x5C, 0x4E, 0x5A, 0x60, 0x5B, 0x4B,
	0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x63, 0x5F, 0x23, 0x4C, 0x65, 0x66, 0x24, 0x56, 0x50, 0x5A,
	0x4B, 0x52, 0x29, 0x52, 0x25, 0x66, 0x23, 0x59, 0x45, 0x53,	0x64, 0x54, 0x4F, 0x64, 0x50, 0x3B, 0x71, 0x24, 0x62, 0x6B,
	0x2B, 0x38, 0x60, 0x3A, 0x2C, 0x75, 0x29, 0x48, 0x22, 0x52,	0x78, 0x66, 0x5F, 0x5C, 0x20, 0x2F, 0x20, 0x4E, 0x44, 0x4F,
	0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
